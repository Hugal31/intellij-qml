/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package name.kropp.intellij.qml;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import name.kropp.intellij.qml.psi.QmlTypes;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static name.kropp.intellij.qml.psi.QmlTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>qml.flex</tt>
 */
public class _QmlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IMPORT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\25\0\1\4\1\51\1\5\3\0\1\51\1\6\1\41\1\42\1\3\1\51\1\45\1\51"+
    "\1\47\1\1\12\46\1\43\1\44\3\51\2\0\22\52\1\32\7\52\1\37\1\0\1\40\1\0\1\50"+
    "\1\0\1\15\1\31\1\30\1\23\1\21\1\22\1\27\1\34\1\7\2\52\1\16\1\10\1\26\1\12"+
    "\1\11\1\52\1\13\1\17\1\14\1\20\1\25\1\33\1\52\1\24\1\52\1\35\1\0\1\36\202"+
    "\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\2\2\1\15\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\4\1\17\1\20\1\0\1\21\1\0\1\4"+
    "\1\22\4\4\1\23\5\4\1\24\5\4\2\20\11\4"+
    "\1\25\4\4\1\26\2\4\1\27\2\20\1\2\4\4"+
    "\1\30\1\4\1\31\2\4\1\32\6\4\1\20\1\0"+
    "\5\4\1\33\1\4\1\34\4\4\1\35\1\36\1\4"+
    "\1\37\1\40\1\4\1\41\1\4\1\42\5\4\1\43"+
    "\1\4\1\44\1\45\1\46\1\4\1\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[128];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a\0\u0285"+
    "\0\u02b0\0\u02db\0\u0306\0\u0331\0\53\0\53\0\53\0\53"+
    "\0\53\0\53\0\53\0\53\0\53\0\u035c\0\u0387\0\u03b2"+
    "\0\u03dd\0\327\0\53\0\u0102\0\u0408\0\u0158\0\u0433\0\u045e"+
    "\0\u0489\0\u04b4\0\u0158\0\u04df\0\u050a\0\u0535\0\u0560\0\u058b"+
    "\0\u05b6\0\u05e1\0\u060c\0\u0637\0\u0662\0\u068d\0\u06b8\0\u06e3"+
    "\0\u070e\0\u0739\0\u0764\0\u078f\0\u07ba\0\u07e5\0\u0810\0\u083b"+
    "\0\u0866\0\u0158\0\u0891\0\u08bc\0\u08e7\0\u0912\0\u0158\0\u093d"+
    "\0\u0968\0\u068d\0\u0993\0\254\0\u06e3\0\u09be\0\u09e9\0\u0a14"+
    "\0\u0a3f\0\u0158\0\u0a6a\0\u0158\0\u0a95\0\u0ac0\0\u0158\0\u0aeb"+
    "\0\u0b16\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2\0\53\0\u0993\0\u0bed"+
    "\0\u0c18\0\u0c43\0\u0c6e\0\u0c99\0\u0158\0\u0cc4\0\u0158\0\u0cef"+
    "\0\u0d1a\0\u0d45\0\u0d70\0\u0158\0\u0158\0\u0d9b\0\u0158\0\u0158"+
    "\0\u0dc6\0\u0158\0\u0df1\0\u0158\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d"+
    "\0\u0ec8\0\u0158\0\u0ef3\0\u0158\0\u0158\0\u0158\0\u0f1e\0\u0158";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[128];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\4\1\6\1\7\1\10"+
    "\1\11\1\12\1\11\1\13\1\14\1\15\1\11\1\16"+
    "\1\11\1\17\1\20\1\21\1\11\1\22\4\11\1\23"+
    "\1\24\1\11\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\11\1\37\1\5\1\11"+
    "\54\0\1\40\1\0\1\41\3\0\26\5\11\0\2\5"+
    "\1\0\2\5\2\0\1\4\1\0\1\4\47\0\1\5"+
    "\1\0\1\5\3\0\26\5\11\0\2\5\1\0\2\5"+
    "\5\42\1\43\45\42\6\44\1\43\44\44\1\0\1\5"+
    "\1\0\1\5\3\0\1\11\1\45\11\11\1\46\12\11"+
    "\11\0\2\11\1\37\1\5\1\11\1\0\1\5\1\0"+
    "\1\5\3\0\26\11\11\0\2\11\1\37\1\5\1\11"+
    "\1\0\1\5\1\0\1\5\3\0\4\11\1\47\21\11"+
    "\11\0\2\11\1\37\1\5\1\11\1\0\1\5\1\0"+
    "\1\5\3\0\12\11\1\50\13\11\11\0\2\11\1\37"+
    "\1\5\1\11\1\0\1\5\1\0\1\5\3\0\4\11"+
    "\1\51\21\11\11\0\2\11\1\37\1\5\1\11\1\0"+
    "\1\5\1\0\1\5\3\0\7\11\1\52\1\53\15\11"+
    "\11\0\2\11\1\37\1\5\1\11\1\0\1\5\1\0"+
    "\1\5\3\0\1\54\25\11\11\0\2\11\1\37\1\5"+
    "\1\11\1\0\1\5\1\0\1\5\3\0\7\11\1\55"+
    "\16\11\11\0\2\11\1\37\1\5\1\11\1\0\1\5"+
    "\1\0\1\5\3\0\3\11\1\56\2\11\1\57\2\11"+
    "\1\60\14\11\11\0\2\11\1\37\1\5\1\11\1\0"+
    "\1\5\1\0\1\5\3\0\3\11\1\61\6\11\1\62"+
    "\13\11\11\0\2\11\1\37\1\5\1\11\1\0\1\5"+
    "\1\0\1\5\3\0\6\11\1\63\17\11\11\0\2\11"+
    "\1\37\1\5\1\11\1\0\1\5\1\0\1\5\3\0"+
    "\1\64\25\11\11\0\2\11\1\37\1\5\1\11\1\0"+
    "\1\5\1\0\1\5\3\0\25\11\1\65\11\0\2\11"+
    "\1\37\1\5\1\11\1\0\1\5\1\0\1\5\3\0"+
    "\26\11\11\0\1\36\1\66\1\37\1\5\1\11\7\0"+
    "\26\37\11\0\3\37\1\0\1\37\2\40\1\0\50\40"+
    "\1\67\1\41\1\67\1\70\3\67\26\41\11\67\2\41"+
    "\1\67\2\41\1\0\1\5\1\0\1\5\3\0\2\11"+
    "\1\71\23\11\11\0\2\11\1\37\1\5\1\11\1\0"+
    "\1\5\1\0\1\5\3\0\3\11\1\72\2\11\1\73"+
    "\17\11\11\0\2\11\1\37\1\5\1\11\1\0\1\5"+
    "\1\0\1\5\3\0\5\11\1\74\1\75\17\11\11\0"+
    "\2\11\1\37\1\5\1\11\1\0\1\5\1\0\1\5"+
    "\3\0\11\11\1\76\14\11\11\0\2\11\1\37\1\5"+
    "\1\11\1\0\1\5\1\0\1\5\3\0\1\77\25\11"+
    "\11\0\2\11\1\37\1\5\1\11\1\0\1\5\1\0"+
    "\1\5\3\0\20\11\1\100\5\11\11\0\2\11\1\37"+
    "\1\5\1\11\1\0\1\5\1\0\1\5\3\0\10\11"+
    "\1\101\15\11\11\0\2\11\1\37\1\5\1\11\1\0"+
    "\1\5\1\0\1\5\3\0\4\11\1\102\21\11\11\0"+
    "\2\11\1\37\1\5\1\11\1\0\1\5\1\0\1\5"+
    "\3\0\7\11\1\103\16\11\11\0\2\11\1\37\1\5"+
    "\1\11\1\0\1\5\1\0\1\5\3\0\17\11\1\104"+
    "\6\11\11\0\2\11\1\37\1\5\1\11\1\0\1\5"+
    "\1\0\1\5\3\0\11\11\1\105\14\11\11\0\2\11"+
    "\1\37\1\5\1\11\1\0\1\5\1\0\1\5\3\0"+
    "\13\11\1\106\12\11\11\0\2\11\1\37\1\5\1\11"+
    "\1\0\1\5\1\0\1\5\3\0\4\11\1\107\21\11"+
    "\11\0\2\11\1\37\1\5\1\11\1\0\1\5\1\0"+
    "\1\5\3\0\17\11\1\110\6\11\11\0\2\11\1\37"+
    "\1\5\1\11\1\0\1\5\1\0\1\5\3\0\1\111"+
    "\25\11\11\0\2\11\1\37\1\5\1\11\1\0\1\5"+
    "\1\0\1\5\3\0\26\11\11\0\1\112\1\11\1\37"+
    "\1\5\1\11\3\67\1\113\50\67\1\114\1\67\1\115"+
    "\3\67\26\41\11\67\2\41\1\67\2\41\1\0\1\5"+
    "\1\0\1\5\3\0\3\11\1\116\22\11\11\0\2\11"+
    "\1\37\1\5\1\11\1\0\1\5\1\0\1\5\3\0"+
    "\2\11\1\117\23\11\11\0\2\11\1\37\1\5\1\11"+
    "\1\0\1\5\1\0\1\5\3\0\20\11\1\120\5\11"+
    "\11\0\2\11\1\37\1\5\1\11\1\0\1\5\1\0"+
    "\1\5\3\0\11\11\1\121\14\11\11\0\2\11\1\37"+
    "\1\5\1\11\1\0\1\5\1\0\1\5\3\0\7\11"+
    "\1\122\4\11\1\123\11\11\11\0\2\11\1\37\1\5"+
    "\1\11\1\0\1\5\1\0\1\5\3\0\12\11\1\124"+
    "\13\11\11\0\2\11\1\37\1\5\1\11\1\0\1\5"+
    "\1\0\1\5\3\0\6\11\1\125\17\11\11\0\2\11"+
    "\1\37\1\5\1\11\1\0\1\5\1\0\1\5\3\0"+
    "\17\11\1\126\6\11\11\0\2\11\1\37\1\5\1\11"+
    "\1\0\1\5\1\0\1\5\3\0\12\11\1\127\13\11"+
    "\11\0\2\11\1\37\1\5\1\11\1\0\1\5\1\0"+
    "\1\5\3\0\10\11\1\130\15\11\11\0\2\11\1\37"+
    "\1\5\1\11\1\0\1\5\1\0\1\5\3\0\21\11"+
    "\1\131\4\11\11\0\2\11\1\37\1\5\1\11\1\0"+
    "\1\5\1\0\1\5\3\0\22\11\1\132\3\11\11\0"+
    "\2\11\1\37\1\5\1\11\1\0\1\5\1\0\1\5"+
    "\3\0\6\11\1\133\17\11\11\0\2\11\1\37\1\5"+
    "\1\11\1\0\1\5\1\0\1\5\3\0\20\11\1\134"+
    "\5\11\11\0\2\11\1\37\1\5\1\11\1\0\1\5"+
    "\1\0\1\5\3\0\7\11\1\135\16\11\11\0\2\11"+
    "\1\37\1\5\1\11\1\67\1\136\1\67\1\137\47\67"+
    "\1\0\1\5\1\0\1\5\3\0\4\11\1\140\21\11"+
    "\11\0\2\11\1\37\1\5\1\11\1\0\1\5\1\0"+
    "\1\5\3\0\12\11\1\141\13\11\11\0\2\11\1\37"+
    "\1\5\1\11\1\0\1\5\1\0\1\5\3\0\1\11"+
    "\1\142\24\11\11\0\2\11\1\37\1\5\1\11\1\0"+
    "\1\5\1\0\1\5\3\0\4\11\1\143\21\11\11\0"+
    "\2\11\1\37\1\5\1\11\1\0\1\5\1\0\1\5"+
    "\3\0\3\11\1\144\22\11\11\0\2\11\1\37\1\5"+
    "\1\11\1\0\1\5\1\0\1\5\3\0\10\11\1\145"+
    "\15\11\11\0\2\11\1\37\1\5\1\11\1\0\1\5"+
    "\1\0\1\5\3\0\6\11\1\146\17\11\11\0\2\11"+
    "\1\37\1\5\1\11\1\0\1\5\1\0\1\5\3\0"+
    "\12\11\1\147\13\11\11\0\2\11\1\37\1\5\1\11"+
    "\1\0\1\5\1\0\1\5\3\0\5\11\1\150\20\11"+
    "\11\0\2\11\1\37\1\5\1\11\1\0\1\5\1\0"+
    "\1\5\3\0\7\11\1\151\16\11\11\0\2\11\1\37"+
    "\1\5\1\11\1\0\1\5\1\0\1\5\3\0\11\11"+
    "\1\152\14\11\11\0\2\11\1\37\1\5\1\11\1\0"+
    "\1\5\1\0\1\5\3\0\7\11\1\153\16\11\11\0"+
    "\2\11\1\37\1\5\1\11\1\0\1\5\1\0\1\5"+
    "\3\0\12\11\1\154\13\11\11\0\2\11\1\37\1\5"+
    "\1\11\1\0\1\5\1\0\1\5\3\0\5\11\1\155"+
    "\20\11\11\0\2\11\1\37\1\5\1\11\1\0\1\5"+
    "\1\0\1\5\3\0\4\11\1\156\21\11\11\0\2\11"+
    "\1\37\1\5\1\11\1\0\1\5\1\0\1\5\3\0"+
    "\6\11\1\157\17\11\11\0\2\11\1\37\1\5\1\11"+
    "\1\0\1\5\1\0\1\5\3\0\17\11\1\160\6\11"+
    "\11\0\2\11\1\37\1\5\1\11\1\0\1\5\1\0"+
    "\1\5\3\0\17\11\1\161\6\11\11\0\2\11\1\37"+
    "\1\5\1\11\1\0\1\5\1\0\1\5\3\0\7\11"+
    "\1\162\16\11\11\0\2\11\1\37\1\5\1\11\1\0"+
    "\1\5\1\0\1\5\3\0\1\163\25\11\11\0\2\11"+
    "\1\37\1\5\1\11\1\0\1\5\1\0\1\5\3\0"+
    "\12\11\1\164\13\11\11\0\2\11\1\37\1\5\1\11"+
    "\1\0\1\5\1\0\1\5\3\0\7\11\1\165\16\11"+
    "\11\0\2\11\1\37\1\5\1\11\1\0\1\5\1\0"+
    "\1\5\3\0\12\11\1\166\13\11\11\0\2\11\1\37"+
    "\1\5\1\11\1\0\1\5\1\0\1\5\3\0\5\11"+
    "\1\167\20\11\11\0\2\11\1\37\1\5\1\11\1\0"+
    "\1\5\1\0\1\5\3\0\7\11\1\170\16\11\11\0"+
    "\2\11\1\37\1\5\1\11\1\0\1\5\1\0\1\5"+
    "\3\0\3\11\1\171\22\11\11\0\2\11\1\37\1\5"+
    "\1\11\1\0\1\5\1\0\1\5\3\0\5\11\1\172"+
    "\20\11\11\0\2\11\1\37\1\5\1\11\1\0\1\5"+
    "\1\0\1\5\3\0\5\11\1\173\20\11\11\0\2\11"+
    "\1\37\1\5\1\11\1\0\1\5\1\0\1\5\3\0"+
    "\15\11\1\174\10\11\11\0\2\11\1\37\1\5\1\11"+
    "\1\0\1\5\1\0\1\5\3\0\15\11\1\175\10\11"+
    "\11\0\2\11\1\37\1\5\1\11\1\0\1\5\1\0"+
    "\1\5\3\0\17\11\1\176\6\11\11\0\2\11\1\37"+
    "\1\5\1\11\1\0\1\5\1\0\1\5\3\0\3\11"+
    "\1\177\22\11\11\0\2\11\1\37\1\5\1\11\1\0"+
    "\1\5\1\0\1\5\3\0\17\11\1\200\6\11\11\0"+
    "\2\11\1\37\1\5\1\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3913];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\22\1\11\11\4\1\1\0\1\11\1\0"+
    "\71\1\1\11\1\0\41\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[128];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _QmlLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _QmlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 40: break;
          case 2: 
            { return OTHER_VALUE;
            } 
            // fall through
          case 41: break;
          case 3: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 42: break;
          case 4: 
            { return IDENTIFIER;
            } 
            // fall through
          case 43: break;
          case 5: 
            { return LBRACE;
            } 
            // fall through
          case 44: break;
          case 6: 
            { return RBRACE;
            } 
            // fall through
          case 45: break;
          case 7: 
            { return LBRACKET;
            } 
            // fall through
          case 46: break;
          case 8: 
            { return RBRACKET;
            } 
            // fall through
          case 47: break;
          case 9: 
            { return LPAREN;
            } 
            // fall through
          case 48: break;
          case 10: 
            { return RPAREN;
            } 
            // fall through
          case 49: break;
          case 11: 
            { return COLON;
            } 
            // fall through
          case 50: break;
          case 12: 
            { return SEMICOLON;
            } 
            // fall through
          case 51: break;
          case 13: 
            { return COMMA;
            } 
            // fall through
          case 52: break;
          case 14: 
            { return INTEGER;
            } 
            // fall through
          case 53: break;
          case 15: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 54: break;
          case 16: 
            { return BLOCK_COMMENT;
            } 
            // fall through
          case 55: break;
          case 17: 
            { return STRING;
            } 
            // fall through
          case 56: break;
          case 18: 
            { return KEYWORD_IF;
            } 
            // fall through
          case 57: break;
          case 19: 
            { return KEYWORD_AS;
            } 
            // fall through
          case 58: break;
          case 20: 
            { return KEYWORD_DO;
            } 
            // fall through
          case 59: break;
          case 21: 
            { return KEYWORD_FOR;
            } 
            // fall through
          case 60: break;
          case 22: 
            { return KEYWORD_VAR;
            } 
            // fall through
          case 61: break;
          case 23: 
            { return FLOAT;
            } 
            // fall through
          case 62: break;
          case 24: 
            { return KEYWORD_REAL;
            } 
            // fall through
          case 63: break;
          case 25: 
            { return TRUE;
            } 
            // fall through
          case 64: break;
          case 26: 
            { return KEYWORD_ELSE;
            } 
            // fall through
          case 65: break;
          case 27: 
            { return KEYWORD_ALIAS;
            } 
            // fall through
          case 66: break;
          case 28: 
            { return FALSE;
            } 
            // fall through
          case 67: break;
          case 29: 
            { return KEYWORD_WHILE;
            } 
            // fall through
          case 68: break;
          case 30: 
            { return KEYWORD_IMPORT;
            } 
            // fall through
          case 69: break;
          case 31: 
            { return KEYWORD_PRAGMA;
            } 
            // fall through
          case 70: break;
          case 32: 
            { return KEYWORD_RETURN;
            } 
            // fall through
          case 71: break;
          case 33: 
            { return KEYWORD_SIGNAL;
            } 
            // fall through
          case 72: break;
          case 34: 
            { return KEYWORD_DOUBLE;
            } 
            // fall through
          case 73: break;
          case 35: 
            { return KEYWORD_DEFAULT;
            } 
            // fall through
          case 74: break;
          case 36: 
            { return KEYWORD_PROPERTY;
            } 
            // fall through
          case 75: break;
          case 37: 
            { return KEYWORD_READONLY;
            } 
            // fall through
          case 76: break;
          case 38: 
            { return KEYWORD_FUNCTION;
            } 
            // fall through
          case 77: break;
          case 39: 
            { return KEYWORD_SINGLETON;
            } 
            // fall through
          case 78: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
